I"<p><img src="/images/wheelchair.png" alt="Autonomous Electric Wheelchair for Children with Physical Challenges" />
<strong>Aim:</strong></p>

<p>Develop a proof-of-concept autonomous electric wheelchair for indoor navigation. The system should be capable of avoiding both static and dynamic obstacles.</p>

<p><strong>Summary:</strong></p>

<p>We structured the codebase using ROS, serving as the interface between software and hardware. The wheelchair was modeled as a differential-drive system and its odometry was calculated from wheel encoder readings. To improve odometry accuracy, we fused IMU sensor data with encoder measurements using an <em>Unscented Kalman Filter (UKF)</em>.</p>

<p>To map the environment, we employed the Gmapping algorithm to generate a 2D occupancy map. Autonomous navigation was implemented using the <em>Rapidly-exploring Random Trees (RRT)</em> algorithm, while localization was managed by the <em>Adaptive Monte Carlo Localizer (AMCL)</em>. Additionally, we generated a 3D point cloud map with the intent to detect stairways, though this feature was not fully implemented.</p>

<p><strong>Takeaways:</strong></p>

<p>This was my first experience using ROS for code management and my first autonomous robotics project, making for a steep learning curve. Despite the challenges, we successfully got the system operational. One major issue we faced was faulty sensor data from the encoders. After a week of hardware debugging, we discovered that the motor controller was malfunctioning.</p>

<p><strong>Media:</strong></p>

<p><strong>Attachments:</strong></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>

<div class="pdf-thumbnail-container">
  
    <div class="pdf-thumbnail-wrapper">
      <canvas class="pdf-thumbnail" data-url="/attachments/Internship_Report.pdf"></canvas>
      <a href="/attachments/Internship_Report.pdf" target="_blank">Read Report</a>
    </div>
  
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".pdf-thumbnail").forEach((canvas) => {
      const url = canvas.getAttribute("data-url");

      pdfjsLib.getDocument(url).promise.then(pdf => {
        return pdf.getPage(1);
      }).then(page => {
        const desiredWidth = 200; // Adjust this to control thumbnail width
        const viewport = page.getViewport({ scale: 1 }); // Default scale (1) to get original width

        const scale = desiredWidth / viewport.width; // Calculate scale based on desired width
        const scaledViewport = page.getViewport({ scale });

        const context = canvas.getContext("2d");

        // Set canvas size to match the scaled page
        canvas.width = scaledViewport.width;
        canvas.height = scaledViewport.height;

        const renderContext = {
          canvasContext: context,
          viewport: scaledViewport
        };

        return page.render(renderContext).promise;
      });

      canvas.addEventListener("click", () => {
        window.open(url, "_blank");
      });
    });
  });
</script>

:ET
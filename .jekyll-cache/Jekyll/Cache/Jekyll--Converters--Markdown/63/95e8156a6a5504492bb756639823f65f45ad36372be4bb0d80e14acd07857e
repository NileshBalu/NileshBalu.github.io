I"ì
<p><img src="/images/wheelchair.png" alt="Autonomous Electric Wheelchair for Children with Physical Challenges" />
<strong>Aim:</strong></p>

<p>Develop a proof of concept of an autonomous electric wheelchair for user navigation in indoor settings. It should be able to avoid static and dynamic obstacles.</p>

<p><strong>Summary:</strong></p>

<p>Organized the code base using ROS as the interface between the software and the hardware. Used the <em>gmapping</em> algorithm to map the surroundings. We improved the accuracy of the wheelchair odometry using the unscented kalman filter. Performed autonomous navigation using <em>Rapidly-exploring Rapid Trees (RRT)</em> algorithm, with localisation carried out by the <em>Adaptive Monte Carlo Localiser</em>.</p>

<p><strong>Takeaways:</strong></p>

<p>This was my first experience using ROS to run and manage code. This was also my first autonomous robot project. So, the learning curve was steep and we were able to get things working.</p>

<p>We faced several issues along the way - the main one being faulty sensor data from the encoders. After a week of debugging the hardware, we realised the motor controller was malfunctioning. We got new ones and the problem was fixed.</p>

<p><strong>Media:</strong></p>

<p><strong>Attachments:</strong></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>

<div class="pdf-thumbnail-container">
  
    <div class="pdf-thumbnail-wrapper">
      <canvas class="pdf-thumbnail" data-url="/attachments/Internship_Report.pdf"></canvas>
      <a href="/attachments/Internship_Report.pdf" target="_blank">Read Report</a>
    </div>
  
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".pdf-thumbnail").forEach((canvas) => {
      const url = canvas.getAttribute("data-url");

      pdfjsLib.getDocument(url).promise.then(pdf => {
        return pdf.getPage(1);
      }).then(page => {
        const desiredWidth = 200; // Adjust this to control thumbnail width
        const viewport = page.getViewport({ scale: 1 }); // Default scale (1) to get original width

        const scale = desiredWidth / viewport.width; // Calculate scale based on desired width
        const scaledViewport = page.getViewport({ scale });

        const context = canvas.getContext("2d");

        // Set canvas size to match the scaled page
        canvas.width = scaledViewport.width;
        canvas.height = scaledViewport.height;

        const renderContext = {
          canvasContext: context,
          viewport: scaledViewport
        };

        return page.render(renderContext).promise;
      });

      canvas.addEventListener("click", () => {
        window.open(url, "_blank");
      });
    });
  });
</script>

:ET
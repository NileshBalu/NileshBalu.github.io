I"¦
<p><img src="/images/yoga.png" alt="Inverse Dynamics Analysis" />
<strong>Aim:</strong></p>

<p>Choose two yoga poses and perform an inverse dynamics analysis to determine the target muscles for each pose. Additionally, summarize a paper (from a given set of papers) and prepare a report.</p>

<p><strong>Summary:</strong></p>

<p>Analyzed the Crane pose and the Warrior III pose. Used anthropometric data to model the lengths of different body segments. Calculated the forces generated by major muscle groups and identified the target muscles for each pose.</p>

<p>Summarized a paper that introduced the Equivalent System method for performing inverse dynamics analysis on polycentric prostheses.</p>

<p><strong>Takeaways:</strong></p>

<p>This course, along with these projects, served as an introduction to biomechanics. It also deepened my interest in assistive and rehabilitation devices and was one of the reasons I chose to pursue my thesis in this field.</p>

<p><strong>Attachments:</strong></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>

<div class="pdf-thumbnail-container">
  
    <div class="pdf-thumbnail-wrapper">
      <canvas class="pdf-thumbnail" data-url="/attachments/ME20B121_yoga.pdf"></canvas>
      <a href="/attachments/ME20B121_yoga.pdf" target="_blank">Yoga</a>
    </div>
  
    <div class="pdf-thumbnail-wrapper">
      <canvas class="pdf-thumbnail" data-url="/attachments/ME20B121_paper_summary.pdf"></canvas>
      <a href="/attachments/ME20B121_paper_summary.pdf" target="_blank">Paper Summary</a>
    </div>
  
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".pdf-thumbnail").forEach((canvas) => {
      const url = canvas.getAttribute("data-url");

      pdfjsLib.getDocument(url).promise.then(pdf => {
        return pdf.getPage(1);
      }).then(page => {
        const desiredWidth = 200; // Adjust this to control thumbnail width
        const viewport = page.getViewport({ scale: 1 }); // Default scale (1) to get original width

        const scale = desiredWidth / viewport.width; // Calculate scale based on desired width
        const scaledViewport = page.getViewport({ scale });

        const context = canvas.getContext("2d");

        // Set canvas size to match the scaled page
        canvas.width = scaledViewport.width;
        canvas.height = scaledViewport.height;

        const renderContext = {
          canvasContext: context,
          viewport: scaledViewport
        };

        return page.render(renderContext).promise;
      });

      canvas.addEventListener("click", () => {
        window.open(url, "_blank");
      });
    });
  });
</script>

:ET